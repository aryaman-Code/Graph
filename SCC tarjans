    int timer=0;
    ArrayList<ArrayList<Integer>> ans;
   void SCCdfs(int i,int disc[],int low[], int inStack[],Stack<Integer> st,ArrayList<ArrayList<Integer>> adj)
   {
       disc[i]=timer;
       low[i]=timer++;
       inStack[i]=1;
       st.push(i);
       for(int ne:adj.get(i))
       {
           if(disc[ne]==-1)
           {
               SCCdfs(ne,disc,low,inStack,st,adj);
               low[i]=Math.min(low[i],low[ne]);
           }
           else if(inStack[ne]==1)
           {
               low[i]=Math.min(low[i],disc[ne]);
           }
           else if(inStack[ne]==0&&disc[ne]!=-1)
           {
               
           }

       }
       
       if(low[i]==disc[i])	//If u is head node of SCC
	{
	//	cout<<"SCC is: ";
     	TreeSet<Integer> ts=new TreeSet<>();
     	int w=-1;
	     while(w!=i)
		{
			inStack[st.peek()] = 0;
			w=st.pop();
			ts.add(w);
		}
	       ArrayList<Integer> a1=new ArrayList<>();
              for(int ne:ts)
                a1.add(ne);
              ans.add(a1);
	}
     
   }
    public ArrayList<ArrayList<Integer>> tarjans(int n, ArrayList<ArrayList<Integer>> adj) 
    {
        // code here
         ans=new ArrayList<>();
        int disc[]=new int[n];
        int low[]=new int[n];
        int inStack[]=new int[n];
        Stack<Integer> st=new Stack<>();
        Arrays.fill(disc,-1);
        for(int i=0;i<n;i++)
        {
            if(disc[i]==-1)
            {
                SCCdfs(i,disc,low,inStack,st,adj);
            }
        }
        Collections.sort(ans, new Comparator<ArrayList<Integer>>() {
      @Override
      public int compare(ArrayList<Integer> one, ArrayList<Integer> two) {
          return one.get(0)-two.get(0);
    }
});
    
      
        return ans;
    }
