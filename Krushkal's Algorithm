// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main(String args[]) throws IOException {

        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String str[] = read.readLine().trim().split(" ");
            int V = Integer.parseInt(str[0]);
            int E = Integer.parseInt(str[1]);
    
            ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<ArrayList<ArrayList<Integer>>>();
            for(int i=0;i<V;i++)
            {
                adj.add(new ArrayList<ArrayList<Integer>>());
            }
            
            int i=0;
            while (i++<E) {
                String S[] = read.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                int w = Integer.parseInt(S[2]);
                ArrayList<Integer> t1 = new ArrayList<Integer>();
                ArrayList<Integer> t2 = new ArrayList<Integer>();
                t1.add(v);
                t1.add(w);
                t2.add(u);
                t2.add(w);
                adj.get(u).add(t1);
                adj.get(v).add(t2);
            }
            
            Solution ob = new Solution();
            
            System.out.println(ob.spanningTree(V, adj));
        }
    }
}// } Driver Code Ends


// User function Template for Java
class Node implements Comparator<Node>
{
    int u,v,w;
    Node(){}
    Node(int u,int v,int w)
    {
        this.u=u;this.v=v;this.w=w;
    }
    public int compare(Node a,Node b)
    {
        if(a.w>b.w)
        return 1;
        else if(a.w<b.w)
        return -1;
        return 0;
    }
}
class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int findPar(int x,int par[])
    {
        if(x==par[x])
        return x;
        return par[x]=findPar(par[x],par);
    }
    static void union(int u,int v,int par[],int rank[])
    {
        u=findPar(u,par);
        v=findPar(v,par);
        if(u==v)
        return;
        if(rank[u]>rank[v])
        {
            par[v]=u;
        }
        else if(rank[u]<rank[v])
        par[u]=v;
        else 
        {
            par[v]=u;
            rank[u]++;
        }
        
    }
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj1) 
    {
        // Add your code here
        ArrayList<Node> adj=new ArrayList<Node>();
        HashMap<Integer,List<Integer>> h=new HashMap<>();
        for(int i=0;i<V;i++)
        {
            for(ArrayList<Integer> ne:adj1.get(i))
            {
                int v=ne.get(0);int w=ne.get(1);
                if(h.get(v)==null||!h.get(v).contains(i))
                {
                 adj.add(new Node(i,v,w)); 
                 if(h.get(i)==null)
                 {
                     List<Integer> a1=new ArrayList<>();
                     a1.add(v); h.put(i,a1);
                 }
                 else
                 {
                     List<Integer> a1=h.get(i);
                     a1.add(v); h.put(i,a1);
                 }
                
                }
             }
        }
        int par[]=new int[V];int rank[]=new int[V];
        for(int i=0;i<V;i++)
{
    par[i]=i;rank[i]=0;
}
int ans=0;
        Collections.sort(adj,new Node());
        for(int i=0;i<adj.size();i++)
        {
            Node t=adj.get(i);int u=t.u;int v=t.v;int w=t.w;
            if(findPar(u,par)!=findPar(v,par))
            {
                ans+=w;
                union(u,v,par,rank);
            }
        }
        return ans;
     
            
     }
        
    
  
}
